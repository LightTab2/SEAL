[gd_scene load_steps=7 format=3 uid="uid://civq7vlw6wx7j"]

[ext_resource type="PackedScene" uid="uid://bh8x54mstorgq" path="res://addons/SEAL/settingTypes/BaseSetting.tscn" id="1"]
[ext_resource type="Texture2D" uid="uid://c2wf8t0larlgj" path="res://legacy/settings/types/Alt.png" id="2"]
[ext_resource type="Texture2D" uid="uid://bssdxurv3ubc5" path="res://legacy/settings/types/Shift.png" id="3"]
[ext_resource type="Texture2D" uid="uid://bdbmjuepr1hp0" path="res://legacy/settings/types/Ctrl.png" id="4"]

[sub_resource type="GDScript" id="1"]
script/source = "extends BaseSetting

@onready var _button:Button = $ValueGroup/VBoxContainer/Button
var _shift_icon:TextureRect
var _control_icon:TextureRect
var _alt_icon:TextureRect
var _last_value := InputEventKey.new()

const _modifier_enabled_color := Color.WHITE
const _modifier_disabled_color := Color.GRAY
const _no_value_string := \"None\"
const _press_any_key_string = \"Press any key\"

func _unhandled_key_input(event):
	if (_button != null):
		if _button.button_pressed:#recording value
			var code = event.keycode
			if code == KEY_SHIFT:
				_shift_icon.modulate = _modifier_enabled_color if event.pressed else _modifier_disabled_color
			elif code == KEY_CTRL:
				_control_icon.modulate = _modifier_enabled_color if event.pressed else _modifier_disabled_color
			elif code == KEY_ALT:
				_alt_icon.modulate = _modifier_enabled_color if event.pressed else _modifier_disabled_color
			else:#key is not modifier, exit key recording
				setting_value = event
				_last_value = event
				_button.button_pressed = false
				update_visuals()#resync visuals with setting value

func update_visuals():
	_button = $ValueGroup/VBoxContainer/Button
	_shift_icon = $ValueGroup/VBoxContainer/HBoxContainer/ShiftIcon
	_control_icon = $ValueGroup/VBoxContainer/HBoxContainer/CtrlIcon
	_alt_icon = $ValueGroup/VBoxContainer/HBoxContainer/AltIcon
	var val:InputEventKey = setting_value
	
	if val:
		_button.text = OS.get_keycode_string(val.keycode)
		_shift_icon.modulate = _modifier_enabled_color if val.shift_pressed else _modifier_disabled_color
		_alt_icon.modulate = _modifier_enabled_color if val.alt_pressed else _modifier_disabled_color
		_control_icon.modulate = _modifier_enabled_color if val.ctrl_pressed else _modifier_disabled_color
		
		_shift_icon.tooltip_text = \"requires shift modifier: \" + str(val.shift_pressed)
		_control_icon.tooltip_text = \"requires control (command on OSX devices) modifier: \" + str(val.ctrl_pressed)
		_alt_icon.tooltip_text = \"requires alt modifier: \" + str(val.alt_pressed)
	elif _button.button_pressed:
		_button.text = _press_any_key_string
		_last_value = setting_value
	else:
		_button.text = _no_value_string
		_shift_icon.modulate = _modifier_disabled_color
		_alt_icon.modulate = _modifier_disabled_color
		_control_icon.modulate = _modifier_disabled_color
		
		_shift_icon.tooltip_text = \"N/A\"
		_control_icon.tooltip_text = \"N/A\"
		_alt_icon.tooltip_text = \"N/A\"


func serialize_setting_value()->String:
	var val:InputEventKey = setting_value
	if val:
		var dict = {
			\"key\":val.keycode, 
			\"shift_required\" : _shift_icon.modulate == _modifier_enabled_color,
			\"control_required\" : _control_icon.modulate == _modifier_enabled_color,
			\"alt_required\" : _alt_icon.modulate == _modifier_enabled_color
			}
		
		return var_to_str(dict)
	else:
		return \"\"


func deserialize_setting_value(value:String):
	if value == \"\":
		setting_value = null
	else:
		var dict:Dictionary = str_to_var(value)
		var val = InputEventKey.new()
		
		val.keycode = dict[\"key\"]
		val.shift_pressed = dict[\"shift_required\"]
		val.ctrl_pressed = dict[\"control_required\"]
		val.alt_pressed = dict[\"alt_required\"]
		setting_value = val


func value_is_valid(value)->bool:
	return value is InputEventKey || value == null


func get_value()->InputEventKey:
	if _button.text == _no_value_string:
		return null
	var val = InputEventKey.new() 
	val.keycode = OS.find_keycode_from_string(_button.text)
	val.shift_pressed = _shift_icon.modulate == _modifier_enabled_color
	val.ctrl_pressed = _control_icon.modulate == _modifier_enabled_color
	val.alt_pressed = _alt_icon.modulate == _modifier_enabled_color
	return val


func _on_button_toggled(_pressed:bool):
	if _pressed:
		setting_value = null
	update_visuals()


func _on_focus_exit():
	setting_value = _last_value
	_button.button_pressed = false

func equals(other:InputEventKey)->bool:
	if other == null && setting_value == null:
		return true
	elif other == null || setting_value == null:
		return false
	else:
		return other.get_keycode_with_modifiers() == setting_value.get_keycode_with_modifiers()
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_vakwb"]

[node name="KeySetting" instance=ExtResource("1")]
offset_right = 546.0
offset_bottom = 390.0
script = SubResource("1")

[node name="VBoxContainer" type="VBoxContainer" parent="ValueGroup" index="0"]
layout_mode = 2

[node name="Button" type="Button" parent="ValueGroup/VBoxContainer" index="0"]
layout_mode = 2
tooltip_text = "Press to change hotkey. Hold down shift, ctrl(command on OSX devices) and/or alt before pressing the key to make the relevant modifier required. Press the button again to disable hotkey."
theme_override_styles/focus = SubResource("StyleBoxEmpty_vakwb")
toggle_mode = true
text = "None"

[node name="HBoxContainer" type="HBoxContainer" parent="ValueGroup/VBoxContainer" index="1"]
layout_mode = 2

[node name="ShiftIcon" type="TextureRect" parent="ValueGroup/VBoxContainer/HBoxContainer" index="0"]
custom_minimum_size = Vector2(75, 50)
layout_mode = 2
texture = ExtResource("3")
expand_mode = 1
stretch_mode = 6

[node name="CtrlIcon" type="TextureRect" parent="ValueGroup/VBoxContainer/HBoxContainer" index="1"]
custom_minimum_size = Vector2(75, 50)
layout_mode = 2
texture = ExtResource("4")
expand_mode = 1
stretch_mode = 6

[node name="AltIcon" type="TextureRect" parent="ValueGroup/VBoxContainer/HBoxContainer" index="2"]
custom_minimum_size = Vector2(75, 50)
layout_mode = 2
texture = ExtResource("2")
expand_mode = 1
stretch_mode = 6

[connection signal="focus_exited" from="ValueGroup/VBoxContainer/Button" to="." method="_on_focus_exit"]
[connection signal="toggled" from="ValueGroup/VBoxContainer/Button" to="." method="_on_button_toggled"]
